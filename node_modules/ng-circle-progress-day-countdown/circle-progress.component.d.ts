import { OnChanges, EventEmitter } from '@angular/core';
export interface CircleProgressOptionsInterface {
    class?: string;
    backgroundColor?: string;
    backgroundOpacity?: number;
    backgroundStroke?: string;
    backgroundStrokeWidth?: number;
    backgroundPadding?: number;
    percent?: number;
    radius?: number;
    space?: number;
    toFixed?: number;
    maxPercent?: number;
    renderOnClick?: boolean;
    outerStrokeWidth?: number;
    outerStrokeColor?: string;
    outerStrokeLinecap?: string;
    innerStrokeColor?: string;
    innerStrokeWidth?: number;
    titleFormat?: Function;
    title?: string | Array<String>;
    titleColor?: string;
    daysHoursFontSize?: string;
    minutesSecondsFontSize?: string;
    animation?: boolean;
    animateTitle?: boolean;
    animateSubtitle?: boolean;
    animationDuration?: number;
    showContent?: boolean;
    showBackground?: boolean;
    showInnerStroke?: boolean;
    clockwise?: boolean;
    endDate?: Date;
    initDate?: Date;
    days?: string;
    hours?: string;
    minutes?: string;
    seconds?: string;
    stringColor?: string;
    daysInitialXY?: Array<number>;
    hoursInitialXY?: Array<number>;
    minutesSecondsInitialXY?: Array<number>;
}
export declare class CircleProgressOptions implements CircleProgressOptionsInterface {
    class: string;
    backgroundColor: string;
    backgroundOpacity: number;
    backgroundStroke: string;
    backgroundStrokeWidth: number;
    backgroundPadding: number;
    percent: number;
    radius: number;
    space: number;
    toFixed: number;
    maxPercent: number;
    renderOnClick: boolean;
    outerStrokeWidth: number;
    outerStrokeColor: string;
    outerStrokeLinecap: string;
    innerStrokeColor: string;
    innerStrokeWidth: number;
    titleFormat: any;
    title: string | Array<String>;
    titleColor: string;
    daysHoursFontSize: string;
    minutesSecondsFontSize: string;
    animation: boolean;
    animateTitle: boolean;
    animateSubtitle: boolean;
    animationDuration: number;
    showContent: boolean;
    showBackground: boolean;
    showInnerStroke: boolean;
    clockwise: boolean;
    endDate: Date;
    initDate: Date;
    days: string;
    hours: string;
    minutes: string;
    seconds: string;
    stringColor: string;
    daysInitialXY: number[];
    hoursInitialXY: number[];
    minutesSecondsInitialXY: number[];
}
export declare class CircleProgressComponent implements OnChanges {
    onClick: EventEmitter<any>;
    onCompletedTime: EventEmitter<any>;
    isTimeReaming: EventEmitter<any>;
    class: string;
    backgroundColor: string;
    backgroundOpacity: number;
    backgroundStroke: string;
    backgroundStrokeWidth: number;
    backgroundPadding: number;
    radius: number;
    space: number;
    toFixed: number;
    renderOnClick: boolean;
    outerStrokeWidth: number;
    outerStrokeColor: string;
    outerStrokeLinecap: string;
    innerStrokeColor: string;
    innerStrokeWidth: string | number;
    titleFormat: Function;
    title: string | Array<String>;
    titleColor: string;
    daysHoursFontSize: string;
    minutesSecondsFontSize: string;
    animation: boolean;
    animateTitle: boolean;
    animationDuration: number;
    showContent: boolean;
    showBackground: boolean;
    showInnerStroke: boolean;
    clockwise: boolean;
    endDate: Date;
    initDate: Date;
    days: string;
    hours: string;
    minutes: string;
    seconds: string;
    stringColor: string;
    daysInitialXY: Array<number>;
    hoursInitialXY: Array<number>;
    minutesSecondsInitialXY: Array<number>;
    templateOptions: CircleProgressOptions;
    svg: any;
    options: CircleProgressOptions;
    defaultOptions: CircleProgressOptions;
    private _timerSubscription;
    private second;
    private minute;
    private hour;
    private day;
    private everySecond;
    private secondsRemaining;
    private minutesReaming;
    private hoursReaming;
    private daysReaming;
    isDrawing(): boolean;
    constructor(defaultOptions: CircleProgressOptions);
    ngOnChanges(changes: any): void;
    private setValuesReaming();
    private calculatePercentage(remainingFromInit, remainingFromNow);
    private acumulateMiliSeconds(data);
    private calculateReamingTime(initialOptionalDate?);
    private onCompletedTimeEmitter();
    private applyOptions;
    render: () => void;
    polarToCartesian: (centerX: any, centerY: any, radius: any, angleInDegrees: any) => {
        x: any;
        y: number;
    };
    draw: (percent: number) => void;
    private getRelativeY;
    private min;
    private max;
    getAnimationParameters: () => {
        times: any;
        step: any;
        interval: any;
    };
    animate: () => void;
    emitClickEvent: (event: any) => void;
}
