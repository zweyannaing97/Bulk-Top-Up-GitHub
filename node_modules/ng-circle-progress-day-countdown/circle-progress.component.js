import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs/Rx';
var CircleProgressOptions = (function () {
    function CircleProgressOptions() {
        this.class = '';
        this.backgroundColor = 'transparent';
        this.backgroundOpacity = 1;
        this.backgroundStroke = 'transparent';
        this.backgroundStrokeWidth = 0;
        this.backgroundPadding = 5;
        this.percent = 0;
        this.radius = 90;
        this.space = 4;
        this.toFixed = 0;
        this.maxPercent = 1000;
        this.renderOnClick = true;
        this.outerStrokeWidth = 8;
        this.outerStrokeColor = '#78C000';
        this.outerStrokeLinecap = 'round';
        this.innerStrokeColor = '#C7E596';
        this.innerStrokeWidth = 4;
        this.titleFormat = undefined;
        this.title = 'auto';
        this.titleColor = '#444444';
        this.daysHoursFontSize = '20';
        this.minutesSecondsFontSize = '15';
        this.animation = true;
        this.animateTitle = true;
        this.animateSubtitle = false;
        this.animationDuration = 500;
        this.showContent = true;
        this.showBackground = true;
        this.showInnerStroke = true;
        this.clockwise = true;
        this.endDate = new Date('08/14/2030 10:0 AM');
        this.initDate = new Date('04/15/2018 10:0 AM');
        this.days = "days";
        this.hours = "hours";
        this.minutes = "min";
        this.seconds = "sec";
        this.stringColor = '#e6ea00';
        this.daysInitialXY = [68, 125];
        this.hoursInitialXY = [90, 125];
        this.minutesSecondsInitialXY = [85, 155];
    }
    return CircleProgressOptions;
}());
export { CircleProgressOptions };
function CircleProgressOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    CircleProgressOptions.prototype.class;
    /** @type {?} */
    CircleProgressOptions.prototype.backgroundColor;
    /** @type {?} */
    CircleProgressOptions.prototype.backgroundOpacity;
    /** @type {?} */
    CircleProgressOptions.prototype.backgroundStroke;
    /** @type {?} */
    CircleProgressOptions.prototype.backgroundStrokeWidth;
    /** @type {?} */
    CircleProgressOptions.prototype.backgroundPadding;
    /** @type {?} */
    CircleProgressOptions.prototype.percent;
    /** @type {?} */
    CircleProgressOptions.prototype.radius;
    /** @type {?} */
    CircleProgressOptions.prototype.space;
    /** @type {?} */
    CircleProgressOptions.prototype.toFixed;
    /** @type {?} */
    CircleProgressOptions.prototype.maxPercent;
    /** @type {?} */
    CircleProgressOptions.prototype.renderOnClick;
    /** @type {?} */
    CircleProgressOptions.prototype.outerStrokeWidth;
    /** @type {?} */
    CircleProgressOptions.prototype.outerStrokeColor;
    /** @type {?} */
    CircleProgressOptions.prototype.outerStrokeLinecap;
    /** @type {?} */
    CircleProgressOptions.prototype.innerStrokeColor;
    /** @type {?} */
    CircleProgressOptions.prototype.innerStrokeWidth;
    /** @type {?} */
    CircleProgressOptions.prototype.titleFormat;
    /** @type {?} */
    CircleProgressOptions.prototype.title;
    /** @type {?} */
    CircleProgressOptions.prototype.titleColor;
    /** @type {?} */
    CircleProgressOptions.prototype.daysHoursFontSize;
    /** @type {?} */
    CircleProgressOptions.prototype.minutesSecondsFontSize;
    /** @type {?} */
    CircleProgressOptions.prototype.animation;
    /** @type {?} */
    CircleProgressOptions.prototype.animateTitle;
    /** @type {?} */
    CircleProgressOptions.prototype.animateSubtitle;
    /** @type {?} */
    CircleProgressOptions.prototype.animationDuration;
    /** @type {?} */
    CircleProgressOptions.prototype.showContent;
    /** @type {?} */
    CircleProgressOptions.prototype.showBackground;
    /** @type {?} */
    CircleProgressOptions.prototype.showInnerStroke;
    /** @type {?} */
    CircleProgressOptions.prototype.clockwise;
    /** @type {?} */
    CircleProgressOptions.prototype.endDate;
    /** @type {?} */
    CircleProgressOptions.prototype.initDate;
    /** @type {?} */
    CircleProgressOptions.prototype.days;
    /** @type {?} */
    CircleProgressOptions.prototype.hours;
    /** @type {?} */
    CircleProgressOptions.prototype.minutes;
    /** @type {?} */
    CircleProgressOptions.prototype.seconds;
    /** @type {?} */
    CircleProgressOptions.prototype.stringColor;
    /** @type {?} */
    CircleProgressOptions.prototype.daysInitialXY;
    /** @type {?} */
    CircleProgressOptions.prototype.hoursInitialXY;
    /** @type {?} */
    CircleProgressOptions.prototype.minutesSecondsInitialXY;
}
var CircleProgressComponent = (function () {
    /**
     * @param {?} defaultOptions
     */
    function CircleProgressComponent(defaultOptions) {
        var _this = this;
        this.onClick = new EventEmitter();
        this.onCompletedTime = new EventEmitter();
        this.isTimeReaming = new EventEmitter();
        this.options = new CircleProgressOptions();
        this.defaultOptions = new CircleProgressOptions();
        this.applyOptions = function () {
            // the options of <circle-progress> may change already
            for (var _i = 0, _a = Object.keys(_this.options); _i < _a.length; _i++) {
                var name_1 = _a[_i];
                if (_this.hasOwnProperty(name_1) && _this[name_1] !== undefined) {
                    _this.options[name_1] = _this[name_1];
                }
                else if (_this.templateOptions && _this.templateOptions[name_1] !== undefined) {
                    _this.options[name_1] = _this.templateOptions[name_1];
                }
            }
            // make sure key options valid
            _this.options.radius = Math.abs(+_this.options.radius);
            _this.options.space = +_this.options.space;
            _this.options.percent = _this.calculatePercentage(_this.calculateReamingTime(_this.options.initDate), _this.calculateReamingTime());
            _this.options.maxPercent = Math.abs(+_this.options.maxPercent);
            _this.options.animationDuration = Math.abs(_this.options.animationDuration);
            _this.options.outerStrokeWidth = Math.abs(+_this.options.outerStrokeWidth);
            _this.options.innerStrokeWidth = Math.abs(+_this.options.innerStrokeWidth);
            _this.options.backgroundPadding = +_this.options.backgroundPadding;
        };
        this.render = function () {
            _this.applyOptions();
            if (_this.options.animation && _this.options.animationDuration > 0) {
                _this.animate();
            }
            else {
                _this.draw(_this.options.percent);
            }
        };
        this.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
            var /** @type {?} */ angleInRadius = angleInDegrees * Math.PI / 180;
            var /** @type {?} */ x = centerX + Math.sin(angleInRadius) * radius;
            var /** @type {?} */ y = centerY - Math.cos(angleInRadius) * radius;
            return { x: x, y: y };
        };
        this.draw = function (percent) {
            // make percent reasonable
            percent = (percent === undefined) ? _this.options.percent : Math.abs(percent);
            // circle percent shouldn't be greater than 100%.
            var /** @type {?} */ circlePercent = (percent > 100) ? 100 : percent;
            // determine box size
            var /** @type {?} */ boxSize = _this.options.radius * 2 + _this.options.outerStrokeWidth * 2;
            if (_this.options.showBackground) {
                boxSize += (_this.options.backgroundStrokeWidth * 2 + _this.max(0, _this.options.backgroundPadding * 2));
            }
            // the centre of the circle
            var /** @type {?} */ centre = { x: boxSize / 2, y: boxSize / 2 };
            // the start point of the arc
            var /** @type {?} */ startPoint = { x: centre.x, y: centre.y - _this.options.radius };
            // get the end point of the arc
            var /** @type {?} */ endPoint = _this.polarToCartesian(centre.x, centre.y, _this.options.radius, 360 * (_this.options.clockwise ? circlePercent : (100 - circlePercent)) / 100); // ####################
            // We'll get an end point with the same [x, y] as the start point when percent is 100%, so move x a little bit.
            if (circlePercent === 100) {
                endPoint.x = endPoint.x + (_this.options.clockwise ? -0.01 : +0.01);
            }
            // largeArcFlag and sweepFlag
            var /** @type {?} */ largeArcFlag, /** @type {?} */ sweepFlag;
            if (circlePercent > 50) {
                _a = _this.options.clockwise ? [1, 1] : [1, 0], largeArcFlag = _a[0], sweepFlag = _a[1];
            }
            else {
                _b = _this.options.clockwise ? [0, 1] : [0, 0], largeArcFlag = _b[0], sweepFlag = _b[1];
            }
            // percent may not equal the actual percent
            var /** @type {?} */ titlePercent = _this.options.animateTitle ? percent : _this.options.percent;
            var /** @type {?} */ titleTextPercent = titlePercent > _this.options.maxPercent ?
                _this.options.maxPercent.toFixed(_this.options.toFixed) + "+" : titlePercent.toFixed(_this.options.toFixed);
            var /** @type {?} */ subtitlePercent = _this.options.animateSubtitle ? percent : _this.options.percent;
            // get title object
            var /** @type {?} */ title = {
                //x: centre.x, NEW VALUE
                x: 55,
                y: centre.y,
                textAnchor: 'middle',
                color: _this.options.titleColor,
                daysHoursFontSize: _this.options.daysHoursFontSize,
                minutesSecondsFontSize: _this.options.minutesSecondsFontSize,
                texts: [],
                tspans: []
            };
            // from v0.9.9, both title and titleFormat(...) may be an array of string.
            if (_this.options.titleFormat !== undefined && _this.options.titleFormat.constructor.name === 'Function') {
                var /** @type {?} */ formatted = _this.options.titleFormat(titlePercent);
                if (formatted instanceof Array) {
                    title.texts = formatted.slice();
                }
                else {
                    title.texts.push(formatted.toString());
                }
            }
            else {
                if (_this.options.title === 'auto') {
                    title.texts.push(titleTextPercent);
                }
                else {
                    if (_this.options.title instanceof Array) {
                        title.texts = _this.options.title.slice();
                    }
                    else {
                        title.texts.push(_this.options.title.toString());
                    }
                }
            }
            // get subtitle object
            var /** @type {?} */ subtitle = {
                x: centre.x,
                y: centre.y + (+centre.y) + (+_this.options.daysHoursFontSize),
                textAnchor: 'middle',
                color: _this.options.stringColor,
                texts: [],
                tspans: []
            };
            // get total count of text lines to be shown
            var /** @type {?} */ rowCount = 0, /** @type {?} */ rowNum = 1;
            _this.options.showContent && (rowCount += title.texts.length);
            _this.options.showContent && (rowCount += subtitle.texts.length);
            // calc dy for each tspan for title
            if (_this.options.showContent) {
                for (var _i = 0, _c = title.texts; _i < _c.length; _i++) {
                    var span = _c[_i];
                    title.tspans.push({ span: span, dy: _this.getRelativeY(rowNum, rowCount) });
                    rowNum++;
                }
            }
            // Bring it all together
            _this.svg = {
                width: boxSize,
                height: boxSize,
                backgroundCircle: {
                    cx: centre.x,
                    cy: centre.y,
                    r: _this.options.radius + _this.options.outerStrokeWidth / 2 + _this.options.backgroundPadding,
                    fill: _this.options.backgroundColor,
                    fillOpacity: _this.options.backgroundOpacity,
                    stroke: _this.options.backgroundStroke,
                    strokeWidth: _this.options.backgroundStrokeWidth,
                },
                path: {
                    // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (https://developer.mozilla.org/en/docs/Web/SVG/Tutorial/Paths#Arcs)
                    d: "M " + startPoint.x + " " + startPoint.y + "\n        A " + _this.options.radius + " " + _this.options.radius + " 0 " + largeArcFlag + " " + sweepFlag + " " + endPoint.x + " " + endPoint.y,
                    stroke: _this.options.outerStrokeColor,
                    strokeWidth: _this.options.outerStrokeWidth,
                    strokeLinecap: _this.options.outerStrokeLinecap,
                    fill: 'none'
                },
                circle: {
                    cx: centre.x,
                    cy: centre.y,
                    r: _this.options.radius - _this.options.space - _this.options.outerStrokeWidth / 2 - _this.options.innerStrokeWidth / 2,
                    fill: 'none',
                    stroke: _this.options.innerStrokeColor,
                    strokeWidth: _this.options.innerStrokeWidth,
                },
                title: title,
                subtitle: subtitle,
            };
            var _a, _b;
        };
        this.getRelativeY = function (rowNum, rowCount) {
            // why '-0.18em'? It's a magic number when property 'alignment-baseline' equals 'baseline'. :)
            var /** @type {?} */ initialOffset = -0.18, /** @type {?} */ offset = 1;
            return (initialOffset + offset * (rowNum - rowCount / 2)).toFixed(2) + 'em';
        };
        this.min = function (a, b) {
            return a < b ? a : b;
        };
        this.max = function (a, b) {
            return a > b ? a : b;
        };
        this.getAnimationParameters = function () {
            var /** @type {?} */ MIN_INTERVAL = 10;
            var /** @type {?} */ times, /** @type {?} */ step, /** @type {?} */ interval;
            if (_this.options.percent >= 100) {
                // we will finish animation in 100 times
                times = 100;
                if (!_this.options.animateTitle && !_this.options.animateSubtitle) {
                    step = 1;
                }
                else {
                    // show title or subtitle animation even if the arc is full, we also need to finish it in 100 times.
                    step = Math.round(_this.min(_this.options.percent, _this.options.maxPercent) / times);
                }
            }
            else {
                // we will finish in as many times as the number of percent.
                times = _this.options.percent;
                step = 1;
            }
            // Get the interval of timer
            interval = Math.round(_this.options.animationDuration / times);
            // Readjust all values if the interval of timer is extremely small.
            if (interval < MIN_INTERVAL) {
                interval = MIN_INTERVAL;
                times = _this.options.animationDuration / interval;
                if (!_this.options.animateTitle && !_this.options.animateSubtitle && _this.options.percent > 100) {
                    step = Math.round(100 / times);
                }
                else {
                    step = Math.round(_this.min(_this.options.percent, _this.options.maxPercent) / times);
                }
            }
            // step must be greater than 0.
            if (step < 1) {
                step = 1;
            }
            return { times: times, step: step, interval: interval };
        };
        this.animate = function () {
            if (_this._timerSubscription && !_this._timerSubscription.closed) {
                _this._timerSubscription.unsubscribe();
            }
            var _a = _this.getAnimationParameters(), step = _a.step, interval = _a.interval;
            var /** @type {?} */ count = 0;
            _this._timerSubscription = Observable.timer(0, interval).subscribe(function () {
                count += step;
                if (count <= _this.options.percent) {
                    if (!_this.options.animateTitle && !_this.options.animateSubtitle && count >= 100) {
                        _this.draw(_this.options.percent);
                        _this._timerSubscription.unsubscribe();
                    }
                    else {
                        _this.draw(count);
                    }
                }
                else {
                    _this.draw(_this.options.percent);
                    _this._timerSubscription.unsubscribe();
                }
            });
        };
        this.emitClickEvent = function (event) {
            if (_this.options.renderOnClick) {
                _this.animate();
            }
            _this.onClick.emit(event);
        };
        Object.assign(this.options, defaultOptions);
        Object.assign(this.defaultOptions, defaultOptions);
        //Earth's time system ;)
        this.second = 1000;
        this.minute = this.second * 60;
        this.hour = this.minute * 60;
        this.day = this.hour * 24;
        this.setValuesReaming();
        this.everySecond = Observable.interval(1000).takeWhile(function () { return true; }).subscribe(function () { return _this.setValuesReaming(); });
    }
    /**
     * @return {?}
     */
    CircleProgressComponent.prototype.isDrawing = function () {
        return (this._timerSubscription && !this._timerSubscription.closed) ? true : false;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CircleProgressComponent.prototype.ngOnChanges = function (changes) {
        this.render();
    };
    /**
     * @return {?}
     */
    CircleProgressComponent.prototype.setValuesReaming = function () {
        var /** @type {?} */ reaming = this.calculateReamingTime();
        this.secondsRemaining = reaming.seconds;
        this.minutesReaming = reaming.minutes;
        this.hoursReaming = reaming.hours;
        this.daysReaming = reaming.days;
        this.options.percent = this.calculatePercentage(this.calculateReamingTime(this.options.initDate), this.calculateReamingTime());
    };
    /**
     * @param {?} remainingFromInit
     * @param {?} remainingFromNow
     * @return {?}
     */
    CircleProgressComponent.prototype.calculatePercentage = function (remainingFromInit, remainingFromNow) {
        var /** @type {?} */ milisecondsFromInit = this.acumulateMiliSeconds(remainingFromInit);
        var /** @type {?} */ milisecondsFromNow = this.acumulateMiliSeconds(remainingFromNow);
        return Math.round(milisecondsFromNow * 100 / milisecondsFromInit);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CircleProgressComponent.prototype.acumulateMiliSeconds = function (data) {
        var /** @type {?} */ accumulator = 0;
        accumulator = accumulator + data.seconds;
        accumulator = accumulator + data.minutes * this.second;
        accumulator = accumulator + data.hours * this.hour;
        accumulator = accumulator + data.days * this.day;
        return accumulator;
    };
    /**
     * @param {?=} initialOptionalDate
     * @return {?}
     */
    CircleProgressComponent.prototype.calculateReamingTime = function (initialOptionalDate) {
        if (initialOptionalDate === void 0) { initialOptionalDate = null; }
        var /** @type {?} */ now;
        initialOptionalDate ? now = initialOptionalDate : now = new Date();
        var /** @type {?} */ distance = this.options.endDate.getTime() - now.getTime();
        if (distance < 0) {
            var /** @type {?} */ days_1 = 0;
            var /** @type {?} */ hours_1 = 0;
            var /** @type {?} */ minutes_1 = 0;
            var /** @type {?} */ seconds_1 = 0;
            var /** @type {?} */ resultado_1 = { days: days_1, hours: hours_1, minutes: minutes_1, seconds: seconds_1 };
            if (this.everySecond)
                this.everySecond.unsubscribe();
            this.onCompletedTimeEmitter();
            return resultado_1;
        }
        var /** @type {?} */ days = Math.floor(distance / this.day);
        var /** @type {?} */ hours = Math.floor((distance % this.day) / this.hour);
        var /** @type {?} */ minutes = Math.floor((distance % this.hour) / this.minute);
        var /** @type {?} */ seconds = Math.floor((distance % this.minute) / this.second);
        var /** @type {?} */ resultado = { days: days, hours: hours, minutes: minutes, seconds: seconds };
        return resultado;
    };
    /**
     * @return {?}
     */
    CircleProgressComponent.prototype.onCompletedTimeEmitter = function () {
        this.onCompletedTime.emit(true);
    };
    return CircleProgressComponent;
}());
export { CircleProgressComponent };
CircleProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'circle-progress',
                template: "\n    <svg xmlns=\"http://www.w3.org/2000/svg\" *ngIf=\"svg\"\n      [attr.height]=\"svg.height\" [attr.width]=\"svg.width\" (click)=\"emitClickEvent($event)\" [attr.class]=\"options.class\">\n      <circle *ngIf=\"options.showBackground\"\n        [attr.cx]=\"svg.backgroundCircle.cx\"\n        [attr.cy]=\"svg.backgroundCircle.cy\"\n        [attr.r]=\"svg.backgroundCircle.r\"\n        [attr.fill]=\"svg.backgroundCircle.fill\"\n        [attr.fill-opacity]=\"svg.backgroundCircle.fillOpacity\"\n        [attr.stroke]=\"'#000000'\"\n        [attr.stroke-opacity]=0.3\n        [attr.stroke-width]=\"svg.backgroundCircle.strokeWidth\"/>\n      <circle *ngIf=\"options.showInnerStroke\"\n        [attr.cx]=\"svg.circle.cx\"\n        [attr.cy]=\"svg.circle.cy\"\n        [attr.r]=\"svg.circle.r\"\n        [attr.fill]=\"svg.circle.fill\"\n        [attr.stroke]=\"svg.circle.stroke\"\n        [attr.stroke-width]=\"svg.circle.strokeWidth\"/>\n      <path\n        [attr.d]=\"svg.path.d\"\n        [attr.stroke]=\"svg.path.stroke\"\n        [attr.stroke-width]=\"svg.path.strokeWidth\"\n        [attr.stroke-linecap]=\"svg.path.strokeLinecap\"\n        [attr.fill]=\"svg.path.fill\"/>\n      <text *ngIf=\"options.showContent\"\n        alignment-baseline=\"baseline\"\n        [attr.x]=\"svg.circle.cx\"\n        [attr.y]=\"svg.circle.cy\"\n        >\n       <ng-container *ngIf=\"options.showContent && this.daysReaming > 0\">\n         <tspan *ngFor=\"let tspan of svg.title.tspans\"\n           [attr.x]=this.options.daysInitialXY[0]\n           [attr.y]=this.options.daysInitialXY[1]\n           [attr.dy]=\"tspan.dy\"\n           [attr.font-size]=\"svg.title.daysHoursFontSize\"\n           [attr.fill]=\"svg.title.color\">\n             {{this.daysReaming}}<tspan [attr.font-size]=\"svg.subtitle.daysHoursFontSize\"\n               [attr.fill]=\"svg.title.color\"> {{this.options.days}}</tspan>\n             {{this.hoursReaming}}<tspan [attr.font-size]=\"svg.subtitle.daysHoursFontSize\"\n               [attr.fill]=\"svg.title.color\"> {{this.options.hours}}</tspan>\n           </tspan>\n           <tspan *ngFor=\"let tspan of svg.title.tspans\"\n             [attr.x]=this.options.minutesSecondsInitialXY[0]\n             [attr.y]=this.options.minutesSecondsInitialXY[1]\n             [attr.dy]=\"tspan.dy\"\n             [attr.font-size]=\"svg.title.minutesSecondsFontSize\"\n             [attr.fill]=\"svg.title.color\">\n             {{this.minutesReaming}}<tspan [attr.font-size]=\"svg.subtitle.minutesSecondsFontSize\"\n               [attr.fill]=\"svg.title.color\"> {{this.options.minutes}}</tspan>\n             {{this.secondsRemaining}}<tspan [attr.font-size]=\"svg.subtitle.minutesSecondsFontSize\"\n               [attr.fill]=\"svg.title.color\"> {{this.options.seconds}}</tspan>\n           </tspan>\n       </ng-container>\n       <ng-container *ngIf=\"options.showContent && this.daysReaming <= 0\">\n         <tspan *ngFor=\"let tspan of svg.title.tspans\"\n           [attr.x]=this.options.hoursInitialXY[0]\n           [attr.y]=this.options.hoursInitialXY[1]\n           [attr.dy]=\"tspan.dy\"\n           [attr.font-size]=\"svg.title.daysHoursFontSize\"\n           [attr.fill]=\"svg.title.color\">\n             {{this.hoursReaming}}<tspan [attr.font-size]=\"svg.subtitle.daysHoursFontSize\"\n               [attr.fill]=\"svg.title.color\"> {{this.options.hours}}</tspan>\n           </tspan>\n           <tspan *ngFor=\"let tspan of svg.title.tspans\"\n             [attr.x]=this.options.minutesSecondsInitialXY[0]\n             [attr.y]=this.options.minutesSecondsInitialXY[1]\n             [attr.dy]=\"tspan.dy\"\n             [attr.font-size]=\"svg.title.minutesSecondsFontSize\"\n             [attr.fill]=\"svg.title.color\">\n             {{this.minutesReaming}}<tspan [attr.font-size]=\"svg.subtitle.minutesSecondsFontSize\"\n               [attr.fill]=\"svg.title.color\"> {{this.options.minutes}}</tspan>\n             {{this.secondsRemaining}}<tspan [attr.font-size]=\"svg.subtitle.minutesSecondsFontSize\"\n               [attr.fill]=\"svg.title.color\"> {{this.options.seconds}}</tspan>\n           </tspan>\n       </ng-container>\n      </text>\n    </svg>\n  "
            },] },
];
/**
 * @nocollapse
 */
CircleProgressComponent.ctorParameters = function () { return [
    { type: CircleProgressOptions, },
]; };
CircleProgressComponent.propDecorators = {
    'onClick': [{ type: Output },],
    'onCompletedTime': [{ type: Output },],
    'isTimeReaming': [{ type: Output },],
    'class': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'backgroundOpacity': [{ type: Input },],
    'backgroundStroke': [{ type: Input },],
    'backgroundStrokeWidth': [{ type: Input },],
    'backgroundPadding': [{ type: Input },],
    'radius': [{ type: Input },],
    'space': [{ type: Input },],
    'toFixed': [{ type: Input },],
    'renderOnClick': [{ type: Input },],
    'outerStrokeWidth': [{ type: Input },],
    'outerStrokeColor': [{ type: Input },],
    'outerStrokeLinecap': [{ type: Input },],
    'innerStrokeColor': [{ type: Input },],
    'innerStrokeWidth': [{ type: Input },],
    'titleFormat': [{ type: Input },],
    'title': [{ type: Input },],
    'titleColor': [{ type: Input },],
    'daysHoursFontSize': [{ type: Input },],
    'minutesSecondsFontSize': [{ type: Input },],
    'animation': [{ type: Input },],
    'animateTitle': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'showContent': [{ type: Input },],
    'showBackground': [{ type: Input },],
    'showInnerStroke': [{ type: Input },],
    'clockwise': [{ type: Input },],
    'endDate': [{ type: Input },],
    'initDate': [{ type: Input },],
    'days': [{ type: Input },],
    'hours': [{ type: Input },],
    'minutes': [{ type: Input },],
    'seconds': [{ type: Input },],
    'stringColor': [{ type: Input },],
    'daysInitialXY': [{ type: Input },],
    'hoursInitialXY': [{ type: Input },],
    'minutesSecondsInitialXY': [{ type: Input },],
    'templateOptions': [{ type: Input, args: ['options',] },],
};
function CircleProgressComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    CircleProgressComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    CircleProgressComponent.ctorParameters;
    /** @type {?} */
    CircleProgressComponent.propDecorators;
    /** @type {?} */
    CircleProgressComponent.prototype.onClick;
    /** @type {?} */
    CircleProgressComponent.prototype.onCompletedTime;
    /** @type {?} */
    CircleProgressComponent.prototype.isTimeReaming;
    /** @type {?} */
    CircleProgressComponent.prototype.class;
    /** @type {?} */
    CircleProgressComponent.prototype.backgroundColor;
    /** @type {?} */
    CircleProgressComponent.prototype.backgroundOpacity;
    /** @type {?} */
    CircleProgressComponent.prototype.backgroundStroke;
    /** @type {?} */
    CircleProgressComponent.prototype.backgroundStrokeWidth;
    /** @type {?} */
    CircleProgressComponent.prototype.backgroundPadding;
    /** @type {?} */
    CircleProgressComponent.prototype.radius;
    /** @type {?} */
    CircleProgressComponent.prototype.space;
    /** @type {?} */
    CircleProgressComponent.prototype.toFixed;
    /** @type {?} */
    CircleProgressComponent.prototype.renderOnClick;
    /** @type {?} */
    CircleProgressComponent.prototype.outerStrokeWidth;
    /** @type {?} */
    CircleProgressComponent.prototype.outerStrokeColor;
    /** @type {?} */
    CircleProgressComponent.prototype.outerStrokeLinecap;
    /** @type {?} */
    CircleProgressComponent.prototype.innerStrokeColor;
    /** @type {?} */
    CircleProgressComponent.prototype.innerStrokeWidth;
    /** @type {?} */
    CircleProgressComponent.prototype.titleFormat;
    /** @type {?} */
    CircleProgressComponent.prototype.title;
    /** @type {?} */
    CircleProgressComponent.prototype.titleColor;
    /** @type {?} */
    CircleProgressComponent.prototype.daysHoursFontSize;
    /** @type {?} */
    CircleProgressComponent.prototype.minutesSecondsFontSize;
    /** @type {?} */
    CircleProgressComponent.prototype.animation;
    /** @type {?} */
    CircleProgressComponent.prototype.animateTitle;
    /** @type {?} */
    CircleProgressComponent.prototype.animationDuration;
    /** @type {?} */
    CircleProgressComponent.prototype.showContent;
    /** @type {?} */
    CircleProgressComponent.prototype.showBackground;
    /** @type {?} */
    CircleProgressComponent.prototype.showInnerStroke;
    /** @type {?} */
    CircleProgressComponent.prototype.clockwise;
    /** @type {?} */
    CircleProgressComponent.prototype.endDate;
    /** @type {?} */
    CircleProgressComponent.prototype.initDate;
    /** @type {?} */
    CircleProgressComponent.prototype.days;
    /** @type {?} */
    CircleProgressComponent.prototype.hours;
    /** @type {?} */
    CircleProgressComponent.prototype.minutes;
    /** @type {?} */
    CircleProgressComponent.prototype.seconds;
    /** @type {?} */
    CircleProgressComponent.prototype.stringColor;
    /** @type {?} */
    CircleProgressComponent.prototype.daysInitialXY;
    /** @type {?} */
    CircleProgressComponent.prototype.hoursInitialXY;
    /** @type {?} */
    CircleProgressComponent.prototype.minutesSecondsInitialXY;
    /** @type {?} */
    CircleProgressComponent.prototype.templateOptions;
    /** @type {?} */
    CircleProgressComponent.prototype.svg;
    /** @type {?} */
    CircleProgressComponent.prototype.options;
    /** @type {?} */
    CircleProgressComponent.prototype.defaultOptions;
    /** @type {?} */
    CircleProgressComponent.prototype._timerSubscription;
    /** @type {?} */
    CircleProgressComponent.prototype.second;
    /** @type {?} */
    CircleProgressComponent.prototype.minute;
    /** @type {?} */
    CircleProgressComponent.prototype.hour;
    /** @type {?} */
    CircleProgressComponent.prototype.day;
    /** @type {?} */
    CircleProgressComponent.prototype.everySecond;
    /** @type {?} */
    CircleProgressComponent.prototype.secondsRemaining;
    /** @type {?} */
    CircleProgressComponent.prototype.minutesReaming;
    /** @type {?} */
    CircleProgressComponent.prototype.hoursReaming;
    /** @type {?} */
    CircleProgressComponent.prototype.daysReaming;
    /** @type {?} */
    CircleProgressComponent.prototype.applyOptions;
    /** @type {?} */
    CircleProgressComponent.prototype.render;
    /** @type {?} */
    CircleProgressComponent.prototype.polarToCartesian;
    /** @type {?} */
    CircleProgressComponent.prototype.draw;
    /** @type {?} */
    CircleProgressComponent.prototype.getRelativeY;
    /** @type {?} */
    CircleProgressComponent.prototype.min;
    /** @type {?} */
    CircleProgressComponent.prototype.max;
    /** @type {?} */
    CircleProgressComponent.prototype.getAnimationParameters;
    /** @type {?} */
    CircleProgressComponent.prototype.animate;
    /** @type {?} */
    CircleProgressComponent.prototype.emitClickEvent;
}
