{"version":3,"file":"ngx-filesaver.js","sources":["ngx-filesaver/src/filesaver.service.ts","ngx-filesaver/src/filesaver.directive.ts","ngx-filesaver/src/filesaver.module.ts","ngx-filesaver/ngx-filesaver.ts"],"names":["__decorate"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { saveAs, FileSaverOptions } from 'file-saver';\n\n@Injectable({ providedIn: 'root' })\nexport class FileSaverService {\n  get isFileSaverSupported(): boolean {\n    try {\n      return !!new Blob();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  genType(fileName?: string): string {\n    if (!fileName || fileName.lastIndexOf('.') === -1) {\n      return 'text/plain';\n    }\n    const type = fileName.substr(fileName.lastIndexOf('.') + 1);\n    switch (type) {\n      case 'txt':\n        return 'text/plain';\n      case 'xml':\n      case 'html':\n        return `text/${type}`;\n      case 'json':\n        return 'octet/stream';\n      default:\n        return `application/${type}`;\n    }\n  }\n\n  save(blob: Blob, fileName?: string, filtType?: string, option?: FileSaverOptions): void {\n    if (!blob) {\n      throw new Error('Data argument should be a blob instance');\n    }\n\n    const file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });\n    saveAs(file, decodeURI(fileName || 'download'), option);\n  }\n\n  saveText(txt: string, fileName?: string, option?: FileSaverOptions): void {\n    const blob = new Blob([txt]);\n    this.save(blob, fileName, null, option);\n  }\n}\n","import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { FileSaverOptions } from 'file-saver';\nimport { FileSaverService } from './filesaver.service';\n\n@Directive({\n  selector: '[fileSaver]',\n  exportAs: 'fileSaver',\n})\nexport class FileSaverDirective {\n  @Input() method = 'GET';\n  @Input() http: Observable<HttpResponse<Blob>>;\n  @Input() query: any;\n  @Input() header: any;\n  @Input() url: string;\n  @Input() fileName: string;\n  @Input() fsOptions: FileSaverOptions;\n  @Output() readonly success = new EventEmitter<HttpResponse<Blob>>();\n  @Output() readonly error = new EventEmitter<any>();\n\n  constructor(private el: ElementRef<HTMLButtonElement>, private fss: FileSaverService, private httpClient: HttpClient) {\n    if (!fss.isFileSaverSupported) {\n      el.nativeElement.classList.add(`filesaver__not-support`);\n    }\n  }\n\n  private getName(res: HttpResponse<Blob>) {\n    return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));\n  }\n\n  @HostListener('click')\n  _click() {\n    if (!this.fss.isFileSaverSupported) {\n      return;\n    }\n    let req = this.http;\n    if (!req) {\n      const params = new HttpParams();\n      const query = this.query || {};\n      // tslint:disable-next-line:forin\n      for (const item in query) {\n        params.set(item, query[item]);\n      }\n\n      req = this.httpClient.request(this.method, this.url, {\n        observe: 'response',\n        responseType: 'blob',\n        headers: this.header,\n        params,\n      });\n    }\n\n    this.setDisabled(true);\n    req.subscribe(\n      res => {\n        if (res.status !== 200 || res.body.size <= 0) {\n          this.error.emit(res);\n          return;\n        }\n        this.fss.save(res.body, this.getName(res), null, this.fsOptions);\n        this.success.emit(res);\n      },\n      err => this.error.emit(err),\n      () => this.setDisabled(false),\n    );\n  }\n\n  private setDisabled(status: boolean) {\n    const el = this.el.nativeElement;\n    el.disabled = status;\n    el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FileSaverDirective } from './filesaver.directive';\n\n@NgModule({\n  declarations: [FileSaverDirective],\n  exports: [FileSaverDirective],\n})\nexport class FileSaverModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}